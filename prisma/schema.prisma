generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String      @id @default(uuid())
  firstName     String?
  lastName      String?
  phoneNumber   String?
  email         String?     @unique
  password      String?
  role          String?
  createdAt     DateTime    @default(now())
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  employee      Employee?   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId    String?     @unique
 updatedAt    DateTime @updatedAt
 salary       Int?
 department   String?
 hrId         String?
}


model Account {
  id                 String   @id @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  refresh_expires_at Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Company {
  id           String   @id @default(uuid())
  companyDetail Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Employee {
  id            String         @id @default(uuid())
  employeeId    String         @unique
  firstName     String
  lastName      String
  email         String         @unique
  phone         String?
  address       String?
  dateOfBirth   DateTime?
  hireDate      DateTime?
  department    String?
  position      String?
  manager       String?
  salary        String?
  bio           String?
  avatar        String?
  skills        String[]
  education     Json?          // Dynamic field for education details
  experience    Json?          // Dynamic field for experience details
  resume        String?
  user          User?
  createdAt     DateTime       @default(now())
  updatedAt    DateTime @updatedAt
}


model IndividualEmployeeReport {
  id                                Int      @id @default(autoincrement())
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
  userId                            String
  executiveSummary                  String
  hrId                              String?
  departement                       String?
  geniusFactorProfileJson            Json
  currentRoleAlignmentAnalysisJson   Json
  internalCareerOpportunitiesJson    Json
  retentionAndMobilityStrategiesJson Json
  developmentActionPlanJson          Json
  personalizedResourcesJson          Json
  dataSourcesAndMethodologyJson      Json
}


