"use client";
import { jsPDF } from "jspdf";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";

export default function PDFReport({ assessment }: any) {
  const generatePDF = () => {
    const doc = new jsPDF();

    // Colors (RGB values for the colors you specified)
    const navyBlue = [8, 18, 41]; // #081229
    const darkGray = [31, 41, 55]; // #1f2937 (gray-800)
    const lightGray = [156, 163, 175]; // #9ca3af
    const white = [255, 255, 255];
    const accent = [59, 130, 246]; // Blue accent
    const success = [34, 197, 94]; // Green
    const warning = [251, 146, 60]; // Orange

    let currentPage = 1;
    let yPos = 20;

    const addBackground = () => {
      doc.setFillColor(navyBlue[0], navyBlue[1], navyBlue[2]);
      doc.rect(
        0,
        0,
        doc.internal.pageSize.width,
        doc.internal.pageSize.height,
        "F"
      );
    };

    const addNewPage = () => {
      doc.addPage();
      currentPage++;
      addBackground();
      yPos = 20;
    };

    const checkPageBreak = (requiredHeight: number) => {
      if (yPos + requiredHeight > 270) {
        addNewPage();
      }
    };

    const addSection = (title: string, content: any, type: string = "text") => {
      const sectionHeight =
        type === "list"
          ? Math.max(40, content.length * 6 + 25)
          : type === "text"
          ? Math.max(30, Math.ceil(content.length / 80) * 6 + 20)
          : 40;

      checkPageBreak(sectionHeight);

      // Section background
      doc.setFillColor(darkGray[0], darkGray[1], darkGray[2]);
      doc.roundedRect(
        10,
        yPos,
        doc.internal.pageSize.width - 20,
        sectionHeight,
        3,
        3,
        "F"
      );
      doc.setDrawColor(lightGray[0], lightGray[1], lightGray[2]);
      doc.setLineWidth(0.5);
      doc.roundedRect(
        10,
        yPos,
        doc.internal.pageSize.width - 20,
        sectionHeight,
        3,
        3,
        "S"
      );

      // Section title
      doc.setTextColor(accent[0], accent[1], accent[2]);
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text(title, 20, yPos + 12);

      // Section content
      doc.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");

      if (type === "text") {
        const lines = doc.splitTextToSize(content, 170);
        doc.text(lines, 20, yPos + 22);
      } else if (type === "list") {
        let listYPos = yPos + 22;
        content.forEach((item: string) => {
          doc.setFillColor(accent[0], accent[1], accent[2]);
          doc.circle(25, listYPos - 2, 1, "F");

          const itemLines = doc.splitTextToSize(item, 160);
          doc.text(itemLines, 30, listYPos);
          listYPos += itemLines.length * 5 + 2;
        });
      }

      yPos += sectionHeight + 8;
    };

    const addFooter = () => {
      const totalPages = doc.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i);

        doc.setFillColor(darkGray[0], darkGray[1], darkGray[2]);
        doc.rect(
          0,
          doc.internal.pageSize.height - 15,
          doc.internal.pageSize.width,
          15,
          "F"
        );

        doc.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
        doc.setFontSize(8);
        doc.text(
          "Generated by Genius Factor System",
          10,
          doc.internal.pageSize.height - 5
        );
        doc.text(
          `Page ${i} of ${totalPages}`,
          doc.internal.pageSize.width - 30,
          doc.internal.pageSize.height - 5
        );
      }
    };

    // Set document properties
    doc.setProperties({
      title: `Genius Factor Assessment - ${assessment.userId}`,
      subject: "Comprehensive Assessment Results",
      author: "Genius Factor System",
    });

    // Add background
    addBackground();

    // HEADER SECTION
    doc.setFillColor(darkGray[0], darkGray[1], darkGray[2]);
    doc.roundedRect(10, 10, doc.internal.pageSize.width - 20, 60, 3, 3, "F");
    doc.setDrawColor(lightGray[0], lightGray[1], lightGray[2]);
    doc.setLineWidth(0.5);
    doc.roundedRect(10, 10, doc.internal.pageSize.width - 20, 60, 3, 3, "S");

    doc.setTextColor(white[0], white[1], white[2]);
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.text("GENIUS FACTOR", 105, 30, { align: "center" });

    doc.setFontSize(16);
    doc.setFont("helvetica", "normal");
    doc.text("Comprehensive Assessment Report", 105, 42, { align: "center" });

    doc.setFontSize(10);
    doc.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
    doc.text(
      `Assessment Date: ${new Date(assessment.createdAt).toLocaleDateString()}`,
      105,
      52,
      { align: "center" }
    );
    doc.text(`Department: ${assessment.departement}`, 105, 60, {
      align: "center",
    });

    yPos = 80;

    // ALIGNMENT SCORE CARD
    const alignmentScore =
      assessment.currentRoleAlignmentAnalysisJson.alignment_score;
    const scoreColor =
      parseInt(alignmentScore) >= 80
        ? success
        : parseInt(alignmentScore) >= 60
        ? warning
        : [239, 68, 68];

    doc.setFillColor(scoreColor[0], scoreColor[1], scoreColor[2]);
    doc.roundedRect(10, yPos, 90, 35, 3, 3, "F");

    doc.setTextColor(white[0], white[1], white[2]);
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.text(`${alignmentScore}%`, 55, yPos + 22, { align: "center" });
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text("ALIGNMENT SCORE", 55, yPos + 12, { align: "center" });

    // RETENTION RISK
    const riskLevel =
      assessment.currentRoleAlignmentAnalysisJson.retention_risk_level;
    const riskColor =
      riskLevel === "Low"
        ? success
        : riskLevel === "Medium"
        ? warning
        : [239, 68, 68];

    doc.setFillColor(riskColor[0], riskColor[1], riskColor[2]);
    doc.roundedRect(110, yPos, 90, 35, 3, 3, "F");

    doc.setTextColor(white[0], white[1], white[2]);
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text(riskLevel, 155, yPos + 22, { align: "center" });
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text("RETENTION RISK", 155, yPos + 12, { align: "center" });

    yPos += 45;

    // EXECUTIVE SUMMARY
    addSection("EXECUTIVE SUMMARY", assessment.executiveSummary, "text");

    // PRIMARY GENIUS FACTOR
    const primaryGenius =
      assessment.geniusFactorProfileJson.primary_genius_factor;
    const secondaryGenius =
      assessment.geniusFactorProfileJson.secondary_genius_factor;

    addSection(
      `PRIMARY GENIUS FACTOR: ${primaryGenius}`,
      assessment.geniusFactorProfileJson.description,
      "text"
    );

    // SECONDARY GENIUS FACTOR
    addSection(
      `SECONDARY GENIUS FACTOR: ${secondaryGenius}`,
      assessment.geniusFactorProfileJson.secondary_description,
      "text"
    );

    // KEY STRENGTHS
    addSection(
      "KEY STRENGTHS",
      assessment.geniusFactorProfileJson.key_strengths,
      "list"
    );

    // ENERGY SOURCES
    addSection(
      "ENERGY SOURCES",
      assessment.geniusFactorProfileJson.energy_sources,
      "list"
    );

    // CURRENT ROLE ALIGNMENT ANALYSIS
    addSection(
      "CURRENT ROLE ALIGNMENT",
      assessment.currentRoleAlignmentAnalysisJson.assessment,
      "text"
    );

    // STRENGTHS BEING UTILIZED
    addSection(
      "STRENGTHS CURRENTLY UTILIZED",
      assessment.currentRoleAlignmentAnalysisJson.strengths_utilized,
      "list"
    );

    // UNDERUTILIZED TALENTS
    addSection(
      "UNDERUTILIZED TALENTS",
      assessment.currentRoleAlignmentAnalysisJson.underutilized_talents,
      "list"
    );

    // CAREER PATHWAYS
    checkPageBreak(50);
    doc.setFillColor(darkGray[0], darkGray[1], darkGray[2]);
    doc.roundedRect(10, yPos, doc.internal.pageSize.width - 20, 45, 3, 3, "F");
    doc.setDrawColor(lightGray[0], lightGray[1], lightGray[2]);
    doc.roundedRect(10, yPos, doc.internal.pageSize.width - 20, 45, 3, 3, "S");

    doc.setTextColor(accent[0], accent[1], accent[2]);
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("CAREER PATHWAYS", 20, yPos + 12);

    doc.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text("Short-term:", 20, yPos + 24);
    doc.text(
      assessment.internalCareerOpportunitiesJson.career_pathways.short_term,
      50,
      yPos + 24
    );
    doc.text("Long-term:", 20, yPos + 34);
    const longTermLines = doc.splitTextToSize(
      assessment.internalCareerOpportunitiesJson.career_pathways.long_term,
      150
    );
    doc.text(longTermLines, 50, yPos + 34);

    yPos += 53;

    // TRANSITION TIMELINE
    checkPageBreak(50);
    doc.setFillColor(darkGray[0], darkGray[1], darkGray[2]);
    doc.roundedRect(10, yPos, doc.internal.pageSize.width - 20, 45, 3, 3, "F");
    doc.setDrawColor(lightGray[0], lightGray[1], lightGray[2]);
    doc.roundedRect(10, yPos, doc.internal.pageSize.width - 20, 45, 3, 3, "S");

    doc.setTextColor(accent[0], accent[1], accent[2]);
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("TRANSITION TIMELINE", 20, yPos + 12);

    doc.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
    doc.setFontSize(10);
    doc.text("6 Months:", 20, yPos + 24);
    const sixMonthLines = doc.splitTextToSize(
      assessment.internalCareerOpportunitiesJson.transition_timeline.six_months,
      140
    );
    doc.text(sixMonthLines, 50, yPos + 24);

    doc.text("1 Year:", 20, yPos + 32);
    const oneYearLines = doc.splitTextToSize(
      assessment.internalCareerOpportunitiesJson.transition_timeline.one_year,
      140
    );
    doc.text(oneYearLines, 50, yPos + 32);

    doc.text("2 Years:", 20, yPos + 40);
    const twoYearLines = doc.splitTextToSize(
      assessment.internalCareerOpportunitiesJson.transition_timeline.two_years,
      140
    );
    doc.text(twoYearLines, 50, yPos + 40);

    yPos += 53;

    // RECOMMENDED DEPARTMENTS
    addSection(
      "RECOMMENDED DEPARTMENTS",
      assessment.internalCareerOpportunitiesJson.recommended_departments,
      "list"
    );

    // SPECIFIC ROLE SUGGESTIONS
    addSection(
      "SPECIFIC ROLE SUGGESTIONS",
      assessment.internalCareerOpportunitiesJson.specific_role_suggestions,
      "list"
    );

    // REQUIRED SKILL DEVELOPMENT
    addSection(
      "REQUIRED SKILL DEVELOPMENT",
      assessment.internalCareerOpportunitiesJson.required_skill_development,
      "list"
    );

    // RETENTION STRATEGIES
    addSection(
      "RETENTION STRATEGIES",
      assessment.retentionAndMobilityStrategiesJson.retention_strategies,
      "list"
    );

    // DEVELOPMENT SUPPORT
    addSection(
      "DEVELOPMENT SUPPORT",
      assessment.retentionAndMobilityStrategiesJson.development_support,
      "list"
    );

    // INTERNAL MOBILITY RECOMMENDATIONS
    addSection(
      "INTERNAL MOBILITY RECOMMENDATIONS",
      assessment.retentionAndMobilityStrategiesJson
        .internal_mobility_recommendations,
      "list"
    );

    // DEVELOPMENT ACTION PLAN
    addSection(
      "30-DAY GOALS",
      assessment.developmentActionPlanJson.thirty_day_goals,
      "list"
    );

    addSection(
      "90-DAY GOALS",
      assessment.developmentActionPlanJson.ninety_day_goals,
      "list"
    );

    addSection(
      "6-MONTH GOALS",
      assessment.developmentActionPlanJson.six_month_goals,
      "list"
    );

    // NETWORKING STRATEGY
    addSection(
      "NETWORKING STRATEGY",
      assessment.developmentActionPlanJson.networking_strategy,
      "list"
    );

    // LEARNING RESOURCES
    addSection(
      "RECOMMENDED LEARNING RESOURCES",
      assessment.personalizedResourcesJson.learning_resources,
      "list"
    );

    // AFFIRMATIONS
    addSection(
      "PERSONAL AFFIRMATIONS",
      assessment.personalizedResourcesJson.affirmations,
      "list"
    );

    // REFLECTION QUESTIONS
    addSection(
      "REFLECTION QUESTIONS",
      assessment.personalizedResourcesJson.reflection_questions,
      "list"
    );

    // MINDFULNESS PRACTICES
    addSection(
      "MINDFULNESS PRACTICES",
      assessment.personalizedResourcesJson.mindfulness_practices,
      "list"
    );

    // METHODOLOGY
    addSection(
      "METHODOLOGY",
      assessment.dataSourcesAndMethodologyJson.methodology,
      "text"
    );

    // DATA SOURCES
    addSection(
      "DATA SOURCES",
      assessment.dataSourcesAndMethodologyJson.data_sources,
      "list"
    );

    // Add footers to all pages
    addFooter();

    // Save the PDF
    doc.save(
      `Genius-Factor-Assessment-${assessment.userId}-${
        new Date(assessment.createdAt).toISOString().split("T")[0]
      }.pdf`
    );
  };

  return (
    <Button
      className="btn-gradient hover:scale-105 transition-transform duration-200"
      onClick={generatePDF}
      disabled={!assessment}
    >
      <Download className="w-4 h-4 mr-2" />
      Download Complete Assessment Report
    </Button>
  );
}
